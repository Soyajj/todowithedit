{"version":3,"sources":["components/Mainpage.js","components/layout/Header.js","App.js","serviceWorker.js","index.js"],"names":["Mainpage","props","deleteTodo","index","todos","state","splice","setState","markComplete","completed","handleChange","e","newTitle","target","value","onSubmit","preventDefault","push","id","uuid","title","edit","editTodo","todoToBeEdited","updateIndex","onSave","this","className","style","color","type","onChange","autoComplete","required","placeholder","map","todo","key","checked","disabled","onClick","Component","Header","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2dfb988b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {v4 as uuid} from 'uuid';\nimport '../App.css';\nimport './Mainpage.css';\n\nexport class Mainpage extends Component {\n    constructor(props){\n    super(props);\n    this.state = ({\n        newTitle: '',\n        edit: false,\n        updateIndex: '',\n        todos: [\n            {\n                id: uuid(),\n                title: 'Sample',\n                completed: false\n            }\n        ]})\n    }\n\n    deleteTodo = (index) => {\n        const todos = [...this.state.todos];\n        todos.splice(index,1);\n        this.setState({todos});\n    }\n\n    markComplete = (index) => {\n        const todos = [...this.state.todos];\n        todos[index].completed = !todos[index].completed;\n        this.setState({todos});\n    }\n\n    handleChange = (e) => {\n        this.setState({\n            newTitle: e.target.value,\n        })\n    }\n\n    onSubmit = (e) => {\n        e.preventDefault();\n        const todos = [...this.state.todos];\n        todos.push({\n            id: uuid(),\n            title: this.state.newTitle,\n            completed: false,\n            edit: false\n        })\n        this.setState({\n            todos,\n            newTitle: ''\n        })\n    }\n\n    editTodo = (index) => {\n        const todos = [...this.state.todos];\n        const todoToBeEdited = todos[index].title;\n        this.setState({\n            newTitle: todoToBeEdited,\n            edit: true,\n            updateIndex: index\n        })\n    }\n\n    onSave = (e) => {\n        e.preventDefault();\n        const todos = [...this.state.todos]\n        todos[this.state.updateIndex].title = this.state.newTitle;\n        this.setState({\n            todos,\n            newTitle: '',\n            updateIndex: '',\n            edit: !this.state.edit,\n         })\n    }\n\n    render(){\n        const {newTitle, edit, todos} = this.state;\n        return(\n        <div className=\"main\">\n            <form  \n                onSubmit={edit ? this.onSave : this.onSubmit}\n                className=\"form\">\n                <i className=\"fa fa-pencil fa-2x\" style={{color: '#ededed'}}/>\n                <input \n                    type=\"text\"\n                    value={newTitle} \n                    onChange={this.handleChange} \n                    id=\"title\"\n                    autoComplete=\"off\"\n                    required={true}\n                    placeholder=\"Write your Tasks...\"\n                    />\n                <button \n                    type=\"submit\"\n                    id=\"show\"\n                    className=\"btn btn-primary\">\n                    <i className={edit ? 'fa fa-save' : 'fa fa-plus'} />\n                </button>\n            </form>\n            {todos.map((todo, index) => {\n                const {id, title, completed} = todo;\n                return (\n                <div key={id} id=\"todos\">\n                    <input \n                        type=\"checkbox\" \n                        onChange={() => this.markComplete(index)} \n                        checked={completed} \n                        disabled={!!edit}\n                        id=\"checkbox\"\n                        />\n                    <span className={completed ? 'completed' : 'none'} id=\"todo\">\n                        {title}\n                    </span>\n                    <button \n                        onClick={() => this.editTodo(index)} \n                        disabled={!!completed}\n                        className=\"btn btn-primary\"\n                        id=\"edit\">\n                        <i className=\"fa fa-edit\" />\n                    </button>\n                    <button \n                        onClick={() => this.deleteTodo(index)}\n                        className=\"btn btn-primary\"\n                        id=\"delete\">\n                        <i className=\"fa fa-trash\" />\n                    </button>\n                </div>)\n            })}\n        </div>\n        )\n    }\n}\n\nexport default Mainpage\n","import React from 'react';\nimport './Header.css'\n\nexport default function Header() {\n    return (\n        <div className=\"header\">\n            <h1><i className=\"fa fa-check-square-o\" />Todo List</h1>\n        </div>\n    )\n}\n","import React from 'react';\nimport './App.css';\nimport './components/Mainpage.css'\nimport Mainpage from './components/Mainpage';\nimport Header from './components/layout/Header';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Mainpage />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["components/Mainpage.js","components/layout/Header.js","App.js","serviceWorker.js","index.js"],"names":["Mainpage","props","deleteTodo","index","todos","concat","state","splice","setState","markComplete","completed","handleChange","e","title","target","value","onSubmit","preventDefault","push","id","uuid","edit","editTodo","todoToBeEdited","updateIndex","onSave","className","this","style","color","type","onChange","autoComplete","required","placeholder","map","todo","key","checked","disabled","onClick","Component","Header","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e8f72285.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {v4 as uuid} from 'uuid';\nimport '../App.css'\nimport './Mainpage.css'\n\nexport class Mainpage extends Component {\n    constructor(props){\n    super(props);\n    this.state = ({\n        title : '',\n        edit : false,\n        updateIndex : '',\n        todos : [\n            {\n                id : uuid(),\n                title : 'Sample',\n                completed :false,\n            }\n        ]})\n    }\n\n    deleteTodo = (index) =>{\n        const todos = [].concat(this.state.todos);\n        todos.splice(index,1);\n        this.setState({\n            todos : todos\n    })\n    \n    }\n\n    markComplete = (index) =>{\n        const todos = [].concat(this.state.todos);\n        todos[index].completed = !todos[index].completed\n        this.setState({\n            todos : todos,\n        })\n    }\n\n    handleChange = (e) => {\n        this.setState({\n            title : e.target.value\n        })\n    }\n\n    onSubmit = (e) =>{\n        e.preventDefault();\n        const todos = [].concat(this.state.todos);\n        todos.push({\n            id : uuid(),\n            title : this.state.title,\n            completed: false,\n            edit : false\n        })\n        this.setState({\n            todos:todos,\n            title : '',\n        })\n    \n    }\n\n    editTodo = (index) =>{\n        const todos = [].concat(this.state.todos);\n        const todoToBeEdited = todos[index].title;\n        this.setState({\n            title : todoToBeEdited,\n            edit : true,\n            updateIndex : index\n        })\n    }\n\n    onSave = (e) =>{\n        e.preventDefault();\n        const todos = [].concat(this.state.todos)\n        todos[this.state.updateIndex].title = this.state.title;\n        this.setState({\n            todos : todos,\n            title : '',\n            updateIndex : '',\n            edit : !this.state.edit,\n         })\n    }\n\n    render() {\n        return (\n        <div className = \"main\">\n            <form  \n                onSubmit={this.state.edit ? this.onSave : this.onSubmit}\n                className = \"form\">\n                <i className = \"fa fa-pencil fa-2x\" style = {{color : '#ededed'}}/>\n                <input \n                    type = \"text\"\n                    value = {this.state.title} \n                    onChange = {this.handleChange} \n                    id=\"title\"\n                    autoComplete = \"off\"\n                    required = {true}\n                    placeholder = \"Write your Tasks...\"\n                    />\n                <button \n                    type=\"submit\"\n                    id = {this.state.edit ? 'hide' : 'show'}\n                    className = \"btn btn-primary\">\n                    <i className = \"fa fa-plus\" />\n                </button>\n                <button \n                    type=\"submit\"\n                    id = {this.state.edit ? 'show' : 'hide'}\n                    className = \"btn btn-primary\">\n                    <i className = \"fa fa-save\" />\n                </button>\n            </form>\n            {this.state.todos.map((todo, index)=>(\n                <div key = {todo.id} id=\"todos\" >\n                    <input \n                        type = \"checkbox\" \n                        onChange = {()=> this.markComplete(index)} \n                        checked ={todo.completed} \n                        disabled = {this.state.edit ? true : false}\n                        id=\"checkbox\"\n                        />\n                    <span className={todo.completed ? 'completed' : 'none'} id=\"todo\" >{todo.title}</span>\n                    <button \n                        onClick = {()=> this.editTodo(index)} \n                        disabled = {todo.completed ? true : false}\n                        className = \"btn btn-primary\"\n                        id= \"edit\">\n                        <i className = \"fa fa-edit\" />\n                    </button>\n                    <button \n                        onClick = {()=>this.deleteTodo(index)}\n                        className = \"btn btn-primary\"\n                        id= \"delete\">\n                        <i className = \"fa fa-trash\" />\n                    </button>\n                </div>\n            ))}\n        </div>\n        )\n    }\n}\n\nexport default Mainpage\n","import React from 'react';\nimport './Header.css'\n\nexport default function Header() {\n    return (\n        <div className = \"header\">\n            <h1><i className=\"fa fa-check-square-o\" />Todo List</h1>\n        </div>\n    )\n}\n","import React from 'react';\nimport './App.css';\nimport Mainpage from './components/Mainpage';\nimport Header from './components/layout/Header'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Mainpage />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}